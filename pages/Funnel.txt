import React, { useState, memo } from "react";
import { useRouter } from "next/router"; // Import useRouter for navigation
import { DndProvider, useDrag, useDrop } from "react-dnd";
import { HTML5Backend } from "react-dnd-html5-backend";

const ItemType = {
  NAME: "name",
};

interface DraggableItemProps {
  name: string;
  imageUrl: string;
  isDraggable: boolean;
}

const DraggableItem = memo(({ name, imageUrl, isDraggable }: DraggableItemProps) => {
  const [{ isDragging }, drag] = useDrag(() => ({
    type: ItemType.NAME,
    item: { name },
    canDrag: isDraggable,
    collect: (monitor) => ({
      isDragging: monitor.isDragging(),
    }),
  }));

  return (
    <div
      ref={drag as unknown as React.Ref<HTMLDivElement>}
      className={`flex items-center space-x-3 bg-gray-700 p-3 rounded-md cursor-pointer shadow-lg transition-opacity duration-200 ${
        isDragging ? "opacity-50" : "opacity-100"
      }`}
      aria-grabbed={isDragging}
      role="button"
    >
      <img
        src={imageUrl}
        alt={name}
        className="w-12 h-12 rounded-full object-cover"
      />
      <span className="text-white font-medium text-base">{name}</span>
    </div>
  );
});

interface DroppableBoxProps {
  index: number;
  onDrop: (item: { name: string }, index: number) => void;
  content: string[];
  onRemove: (index: number, name: string) => void;
}

const DroppableBox = memo(({ index, onDrop, content, onRemove }: DroppableBoxProps) => {
  const [{ isOver }, drop] = useDrop(() => ({
    accept: ItemType.NAME,
    drop: (item: { name: string }) => onDrop(item, index),
    collect: (monitor) => ({
      isOver: monitor.isOver(),
    }),
  }));

  return (
    <div
      ref={drop as unknown as React.Ref<HTMLDivElement>}
      className={`flex flex-col items-center justify-center bg-gray-700 p-4 rounded-md shadow-lg border space-y-1 h-32 w-full ${
        isOver ? "border-yellow-400" : "border-gray-500"
      }`}
      role="region"
      aria-label={`Drop zone ${index + 1}`}
    >
      <h2 className="text-white font-semibold mb-2">Box {index + 1}</h2>
      {content.length > 0 ? (
        content.map((name, idx) => (
          <div
            key={idx}
            className="text-sm text-yellow-400 cursor-pointer"
            onClick={() => onRemove(index, name)}
            title="Click to remove"
          >
            {name}
          </div>
        ))
      ) : (
        <span className="text-gray-400 text-sm">Drop here</span>
      )}
    </div>
  );
});

const QuizPage = () => {
  const router = useRouter(); // Initialize useRouter for navigation
  const [boxes, setBoxes] = useState<string[][]>([[], [], [], [], []]);
  const [draggedItems, setDraggedItems] = useState<Record<string, boolean>>({});

  const handleDrop = (item: { name: string }, index: number) => {
    const updatedBoxes = [...boxes];
    if (!updatedBoxes[index].includes(item.name)) {
      updatedBoxes[index].push(item.name);
      setBoxes(updatedBoxes);
      setDraggedItems({ ...draggedItems, [item.name]: true });
    }
  };

  const handleRemove = (index: number, name: string) => {
    const updatedBoxes = [...boxes];
    updatedBoxes[index] = updatedBoxes[index].filter((n) => n !== name);
    setBoxes(updatedBoxes);

    if (!updatedBoxes.some((box) => box.includes(name))) {
      setDraggedItems({ ...draggedItems, [name]: false });
    }
  };

  const navigateToNextQuestion = () => {
    router.push("/next-question"); // Navigate to the next question page
  };

  const namesWithImages = [
    { name: "Tony Robbins", imageUrl: "/Tony Robins.png" },
    { name: "Mr. Beast", imageUrl: "/Mr Beast.png" },
    { name: "Warren Buffet", imageUrl: "/Warren Buffet.png" },
    { name: "Jeff Bezos", imageUrl: "/Jeff Bezos.png" },
    { name: "Elon Musk", imageUrl: "/Elon Musk.png" },
  ];

  return (
    <DndProvider backend={HTML5Backend}>
      <div className="flex flex-col items-center justify-center min-h-screen bg-gray-900 text-white">
        <div className="w-full max-w-6xl p-6 bg-gray-800 rounded-lg shadow-lg grid md:grid-cols-2 lg:grid-cols-3 gap-8">
          {/* Left Section */}
          <div className="md:col-span-2 lg:col-span-1 space-y-4">
            <h1 className="text-lg md:text-xl font-semibold text-yellow-300">
              Who's Success Story Inspires You The Most?
            </h1>
            <p className="text-sm md:text-base text-gray-400">
              Highlight 1 and 5 in the 1-5 selection: <br />
              1 (this inspires me the most), 5 (I haven't heard of this person).
            </p>
          </div>

          {/* Center Section: Droppable Boxes */}
          <div className="space-y-4">
            {boxes.map((content, index) => (
              <DroppableBox
                key={index}
                index={index}
                onDrop={handleDrop}
                content={content}
                onRemove={handleRemove}
              />
            ))}
          </div>

          {/* Right Section: Draggable Items */}
          <div className="space-y-4">
            {namesWithImages.map((person, index) => (
              <DraggableItem
                key={index}
                name={person.name}
                imageUrl={person.imageUrl}
                isDraggable={!draggedItems[person.name]}
              />
            ))}
          </div>
        </div>

        {/* Next Button */}
        <button
          onClick={navigateToNextQuestion}
          className="mt-8 px-6 py-3 bg-yellow-400 text-gray-900 font-semibold rounded-lg hover:bg-yellow-500 transition"
        >
          Next
        </button>
      </div>
    </DndProvider>
  );
};

export default QuizPage;
